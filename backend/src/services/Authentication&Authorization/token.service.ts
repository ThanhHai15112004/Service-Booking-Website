import pool from "../../config/db";
import { RefreshToken } from "../../models/refresh_token.model";
import dotenv from "dotenv";
dotenv.config();

// üü¢ L∆∞u refresh token v√†o DB (ƒë·ªçc th·ªùi h·∫°n t·ª´ .env)
export async function saveRefreshToken(account_id: string, token: string): Promise<void> {
  // ƒê·ªçc gi√° tr·ªã t·ª´ .env
  const raw = process.env.JWT_REFRESH_EXPIRES_IN || "6h";

  // N·∫øu kh√¥ng c√≥ ch·ªØ "h" th√¨ m·∫∑c ƒë·ªãnh coi l√† s·ªë gi·ªù
  const hours = raw.endsWith("h") ? parseInt(raw.replace("h", ""), 10) : parseInt(raw, 10);

  const query = `
    INSERT INTO refresh_tokens (account_id, token, expires_at)
    VALUES (?, ?, DATE_ADD(NOW(), INTERVAL ? HOUR))
  `;

  await pool.execute(query, [account_id, token, hours]);
}

// üü¢ Ki·ªÉm tra token c√≥ t·ªìn t·∫°i kh√¥ng
export async function isRefreshTokenValid(token: string): Promise<boolean> {
  const [rows]: any = await pool.query(
    `SELECT * FROM refresh_tokens WHERE token = ? AND expires_at > NOW()`,
    [token]
  );
  return rows.length > 0;
}

// üü¢ X√≥a token khi logout
export async function revokeRefreshToken(token: string): Promise<void> {
  await pool.query(`DELETE FROM refresh_tokens WHERE token = ?`, [token]);
}
